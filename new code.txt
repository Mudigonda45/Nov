Model 
package com.example.todo.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Task {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String title;
    private String description;
    private boolean completed;

    // Getters and Setters
}
==========================================================
service
package com.example.todo.service;

import com.example.todo.model.Task;
import com.example.todo.repository.TaskRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TaskService {
    private final TaskRepository taskRepository;

    public TaskService(TaskRepository taskRepository) {
        this.taskRepository = taskRepository;
    }

    public List<Task> getAllTasks() {
        return taskRepository.findAll();
    }

    public Task saveTask(Task task) {
        return taskRepository.save(task);
    }

    public Task updateTask(Long id, Task updatedTask) {
        return taskRepository.findById(id)
            .map(task -> {
                task.setTitle(updatedTask.getTitle());
                task.setDescription(updatedTask.getDescription());
                task.setCompleted(updatedTask.isCompleted());
                return taskRepository.save(task);
            })
            .orElseThrow(() -> new RuntimeException("Task not found with id: " + id));
    }

    public void deleteTask(Long id) {
        taskRepository.deleteById(id);
    }
}
================================================================================================
controller 
package com.example.todo.controller;

import com.example.todo.model.Task;
import com.example.todo.service.TaskService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/tasks")
@CrossOrigin(origins = "http://localhost:4200") // Allow CORS for Angular
public class TaskController {
    private final TaskService taskService;

    public TaskController(TaskService taskService) {
        this.taskService = taskService;
    }

    @GetMapping
    public List<Task> getAllTasks() {
        return taskService.getAllTasks();
    }

    @PostMapping
    public Task createTask(@RequestBody Task task) {
        return taskService.saveTask(task);
    }

    @PutMapping("/{id}")
    public Task updateTask(@PathVariable Long id, @RequestBody Task updatedTask) {
        return taskService.updateTask(id, updatedTask);
    }

    @DeleteMapping("/{id}")
    public void deleteTask(@PathVariable Long id) {
        taskService.deleteTask(id);
    }
}
============================================================================================
export interface Task {
    id?: number;
    title: string;
    description: string;
    completed: boolean;
}
=====================================
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Task } from './task';

@Injectable({
    providedIn: 'root',
})
export class TaskService {
    private apiUrl = 'http://localhost:8080/api/tasks';

    constructor(private http: HttpClient) {}

    getTasks(): Observable<Task[]> {
        return this.http.get<Task[]>(this.apiUrl);
    }

    addTask(task: Task): Observable<Task> {
        return this.http.post<Task>(this.apiUrl, task);
    }

    updateTask(id: number, task: Task): Observable<Task> {
        return this.http.put<Task>(`${this.apiUrl}/${id}`, task);
    }

    deleteTask(id: number): Observable<void> {
        return this.http.delete<void>(`${this.apiUrl}/${id}`);
    }
}
===================================================================
import { Component, OnInit } from '@angular/core';
import { Task } from './task';
import { TaskService } from './task.service';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css'],
})
export class AppComponent implements OnInit {
    tasks: Task[] = [];
    newTask: Task = { title: '', description: '', completed: false };
    editingTask: Task | null = null;

    constructor(private taskService: TaskService) {}

    ngOnInit(): void {
        this.loadTasks();
    }

    loadTasks(): void {
        this.taskService.getTasks().subscribe((data) => (this.tasks = data));
    }

    addTask(): void {
        this.taskService.addTask(this.newTask).subscribe(() => {
            this.loadTasks();
            this.newTask = { title: '', description: '', completed: false };
        });
    }

    editTask(task: Task): void {
        this.editingTask = { ...task };
    }

    updateTask(): void {
        if (this.editingTask) {
            this.taskService
                .updateTask(this.editingTask.id!, this.editingTask)
                .subscribe(() => {
                    this.loadTasks();
                    this.editingTask = null;
                });
        }
    }

    deleteTask(id: number): void {
        this.taskService.deleteTask(id).subscribe(() => this.loadTasks());
    }

    cancelEdit(): void {
        this.editingTask = null;
    }
}
======================================================	==============================
<div style="text-align:center">
    <h1>To-Do Application</h1>

    <!-- Add Task Form -->
    <div>
        <h2>Add Task</h2>
        <input [(ngModel)]="newTask.title" placeholder="Title" />
        <input [(ngModel)]="newTask.description" placeholder="Description" />
        <button (click)="addTask()">Add Task</button>
    </div>

    <!-- Edit Task Form -->
    <div *ngIf="editingTask">
        <h2>Edit Task</h2>
        <input [(ngModel)]="editingTask.title" placeholder="Title" />
        <input [(ngModel)]="editingTask.description" placeholder="Description" />
        <label>
            <input type="checkbox" [(ngModel)]="editingTask.completed" />
            Completed
        </label>
        <button (click)="updateTask()">Update Task</button>
        <button (click)="cancelEdit()">Cancel</button>
    </div>

    <!-- Task List -->
    <ul>
        <li *ngFor="let task of tasks">
            <h3>{{ task.title }}</h3>
            <p>{{ task.description }}</p>
            <p>Status: {{ task.completed ? 'Completed' : 'Pending' }}</p>
            <button (click)="editTask(task)">Edit</button>
            <button (click)="deleteTask(task.id!)">Delete</button>
        </li>
    </ul>
</div>
