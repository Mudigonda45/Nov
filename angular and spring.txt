package com.example.todo.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Task {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String title;
    private boolean completed;

    // Getters and Setters
}


============================================================
 Repository
package com.example.todo.repository;

import com.example.todo.model.Task;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TaskRepository extends JpaRepository<Task, Long> {
}
===========================================================================
Service:

java
Copy code
package com.example.todo.service;

import com.example.todo.model.Task;
import com.example.todo.repository.TaskRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TaskService {
    private final TaskRepository taskRepository;

    public TaskService(TaskRepository taskRepository) {
        this.taskRepository = taskRepository;
    }

    public List<Task> getAllTasks() {
        return taskRepository.findAll();
    }

    public Task saveTask(Task task) {
        return taskRepository.save(task);
    }

    public void deleteTask(Long id) {
        taskRepository.deleteById(id);
    }
}




=================================================
Controller:

java
Copy code
package com.example.todo.controller;

import com.example.todo.model.Task;
import com.example.todo.service.TaskService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/tasks")
public class TaskController {
    private final TaskService taskService;

    public TaskController(TaskService taskService) {
        this.taskService = taskService;
    }

    @GetMapping
    public List<Task> getAllTasks() {
        return taskService.getAllTasks();
    }

    @PostMapping
    public Task createTask(@RequestBody Task task) {
        return taskService.saveTask(task);
    }

    @DeleteMapping("/{id}")
    public void deleteTask(@PathVariable Long id) {
        taskService.deleteTask(id);
    }
}
===========================
application.properties:

properties
Copy code
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.h2.console.enabled=true
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
===============================================================
export interface Task {
    id?: number;
    title: string;
    completed: boolean;
}
=========================================
API Calls:

typescript
Copy code
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Task } from './task';

@Injectable({
    providedIn: 'root',
})
export class TaskService {
    private apiUrl = 'http://localhost:8080/api/tasks';

    constructor(private http: HttpClient) {}

    getTasks(): Observable<Task[]> {
        return this.http.get<Task[]>(this.apiUrl);
    }

    addTask(task: Task): Observable<Task> {
        return this.http.post<Task>(this.apiUrl, task);
    }

    deleteTask(id: number): Observable<void> {
        return this.http.delete<void>(`${this.apiUrl}/${id}`);
    }
}
========================================================================
Component:

typescript
Copy code
import { Component, OnInit } from '@angular/core';
import { Task } from './task';
import { TaskService } from './task.service';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css'],
})
export class AppComponent implements OnInit {
    tasks: Task[] = [];
    newTaskTitle = '';

    constructor(private taskService: TaskService) {}

    ngOnInit(): void {
        this.loadTasks();
    }

    loadTasks(): void {
        this.taskService.getTasks().subscribe((data) => (this.tasks = data));
    }

    addTask(): void {
        const task: Task = { title: this.newTaskTitle, completed: false };
        this.taskService.addTask(task).subscribe(() => {
            this.loadTasks();
            this.newTaskTitle = '';
        });
    }

    deleteTask(id: number): void {
        this.taskService.deleteTask(id).subscribe(() => this.loadTasks());
    }
}
========================================================================
<div style="text-align:center">
    <h1>To-Do Application</h1>
    <input [(ngModel)]="newTaskTitle" placeholder="Enter task" />
    <button (click)="addTask()">Add Task</button>

    <ul>
        <li *ngFor="let task of tasks">
            {{ task.title }}
            <button (click)="deleteTask(task.id)">Delete</button>
        </li>
    </ul>
</div>
==========================
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Task } from '../../task';

@Component({
    selector: 'app-task-list',
    templateUrl: './task-list.component.html',
    styleUrls: ['./task-list.component.css'],
})
export class TaskListComponent {
    @Input() tasks: Task[] = [];
    @Output() edit = new EventEmitter<Task>();
    @Output() delete = new EventEmitter<number>();

    onEdit(task: Task): void {
        this.edit.emit(task);
    }

    onDelete(taskId: number): void {
        this.delete.emit(taskId);
    }
}
========================================================
<div>
    <h2>Add Task</h2>
    <input [(ngModel)]="newTask.title" placeholder="Title" />
    <input [(ngModel)]="newTask.description" placeholder="Description" />
    <button (click)="onAdd()">Add Task</button>
</div>
TypeScript:

typescript
Copy code
import { Component, EventEmitter, Output } from '@angular/core';
import { Task } from '../../task';

@Component({
    selector: 'app-task-form',
    templateUrl: './task-form.component.html',
    styleUrls: ['./task-form.component.css'],
})
export class TaskFormComponent {
    newTask: Task = { title: '', description: '', completed: false };

    @Output() add = new EventEmitter<Task>();

    onAdd(): void {
        this.add.emit(this.newTask);
        this.newTask = { title: '', description: '', completed: false };
    }
}
====================================================================
<div *ngIf="editingTask">
    <h2>Edit Task</h2>
    <input [(ngModel)]="editingTask.title" placeholder="Title" />
    <input [(ngModel)]="editingTask.description" placeholder="Description" />
    <label>
        <input type="checkbox" [(ngModel)]="editingTask.completed" />
        Completed
    </label>
    <button (click)="onUpdate()">Update Task</button>
    <button (click)="onCancel()">Cancel</button>
</div>
=============
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Task } from '../../task';

@Component({
    selector: 'app-task-edit',
    templateUrl: './task-edit.component.html',
    styleUrls: ['./task-edit.component.css'],
})
export class TaskEditComponent {
    @Input() editingTask: Task | null = null;
    @Output() update = new EventEmitter<Task>();
    @Output() cancel = new EventEmitter<void>();

    onUpdate(): void {
        if (this.editingTask) {
            this.update.emit(this.editingTask);
        }
    }

    onCancel(): void {
        this.cancel.emit();
    }
}
============================================================
<div style="text-align:center">
    <h1>To-Do Application</h1>

    <!-- Task Form -->
    <app-task-form (add)="addTask($event)"></app-task-form>

    <!-- Task Edit -->
    <app-task-edit
        *ngIf="editingTask"
        [editingTask]="editingTask"
        (update)="updateTask($event)"
        (cancel)="cancelEdit()"
    ></app-task-edit>

    <!-- Task List -->
    <app-task-list
        [tasks]="tasks"
        (edit)="editTask($event)"
        (delete)="deleteTask($event)"
    ></app-task-list>
</div>
=======================
import { Component, OnInit } from '@angular/core';
import { Task } from './task';
import { TaskService } from './task.service';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css'],
})
export class AppComponent implements OnInit {
    tasks: Task[] = [];
    editingTask: Task | null = null;

    constructor(private taskService: TaskService) {}

    ngOnInit(): void {
        this.loadTasks();
    }

    loadTasks(): void {
        this.taskService.getTasks().subscribe((data) => (this.tasks = data));
    }

    addTask(task: Task): void {
        this.taskService.addTask(task).subscribe(() => this.loadTasks());
    }

    editTask(task: Task): void {
        this.editingTask = { ...task };
    }

    updateTask(task: Task): void {
        if (task.id) {
            this.taskService.updateTask(task.id, task).subscribe(() => {
                this.loadTasks();
                this.editingTask = null;
            });
        }
    }

    deleteTask(taskId: number): void {
        this.taskService.deleteTask(taskId).subscribe(() => this.loadTasks());
    }

    cancelEdit(): void {
        this.editingTask = null;
    }
}
